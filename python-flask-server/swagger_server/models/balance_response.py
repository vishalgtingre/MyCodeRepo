# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BalanceResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, balance_type: str=None, amount: float=None, currency: str=None):  # noqa: E501
        """BalanceResponse - a model defined in Swagger

        :param account_number: The account_number of this BalanceResponse.  # noqa: E501
        :type account_number: str
        :param balance_type: The balance_type of this BalanceResponse.  # noqa: E501
        :type balance_type: str
        :param amount: The amount of this BalanceResponse.  # noqa: E501
        :type amount: float
        :param currency: The currency of this BalanceResponse.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'account_number': str,
            'balance_type': str,
            'amount': float,
            'currency': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'balance_type': 'balanceType',
            'amount': 'amount',
            'currency': 'currency'
        }

        self._account_number = account_number
        self._balance_type = balance_type
        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'BalanceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The balanceResponse of this BalanceResponse.  # noqa: E501
        :rtype: BalanceResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self) -> str:
        """Gets the account_number of this BalanceResponse.

        The IBAN for which the balance was retrieved  # noqa: E501

        :return: The account_number of this BalanceResponse.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number: str):
        """Sets the account_number of this BalanceResponse.

        The IBAN for which the balance was retrieved  # noqa: E501

        :param account_number: The account_number of this BalanceResponse.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def balance_type(self) -> str:
        """Gets the balance_type of this BalanceResponse.

        Indicator of the type of balance that was retrieved  # noqa: E501

        :return: The balance_type of this BalanceResponse.
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type: str):
        """Sets the balance_type of this BalanceResponse.

        Indicator of the type of balance that was retrieved  # noqa: E501

        :param balance_type: The balance_type of this BalanceResponse.
        :type balance_type: str
        """
        allowed_values = ["BOOKBALANCE"]  # noqa: E501
        if balance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_type` ({0}), must be one of {1}"
                .format(balance_type, allowed_values)
            )

        self._balance_type = balance_type

    @property
    def amount(self) -> float:
        """Gets the amount of this BalanceResponse.

        Amount including minus -9999999.99, unformatted. Negative in case of debit balance  # noqa: E501

        :return: The amount of this BalanceResponse.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this BalanceResponse.

        Amount including minus -9999999.99, unformatted. Negative in case of debit balance  # noqa: E501

        :param amount: The amount of this BalanceResponse.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self) -> str:
        """Gets the currency of this BalanceResponse.

        Currency of the mutation, 3 characters alphabetic ISO currency code (e.g. EUR or USD) as per ISO 4217  # noqa: E501

        :return: The currency of this BalanceResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this BalanceResponse.

        Currency of the mutation, 3 characters alphabetic ISO currency code (e.g. EUR or USD) as per ISO 4217  # noqa: E501

        :param currency: The currency of this BalanceResponse.
        :type currency: str
        """

        self._currency = currency
