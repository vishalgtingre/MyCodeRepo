# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TransactionResponseTransactions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, transaction_id: str=None, mutation_code: str=None, description_lines: List[str]=None, transaction_timestamp: str=None, book_date: date=None, balance_after_mutation: float=None, counter_party_account_number: str=None, counter_party_name: str=None, amount: float=None, currency: str=None, status: str=None):  # noqa: E501
        """TransactionResponseTransactions - a model defined in Swagger

        :param transaction_id: The transaction_id of this TransactionResponseTransactions.  # noqa: E501
        :type transaction_id: str
        :param mutation_code: The mutation_code of this TransactionResponseTransactions.  # noqa: E501
        :type mutation_code: str
        :param description_lines: The description_lines of this TransactionResponseTransactions.  # noqa: E501
        :type description_lines: List[str]
        :param transaction_timestamp: The transaction_timestamp of this TransactionResponseTransactions.  # noqa: E501
        :type transaction_timestamp: str
        :param book_date: The book_date of this TransactionResponseTransactions.  # noqa: E501
        :type book_date: date
        :param balance_after_mutation: The balance_after_mutation of this TransactionResponseTransactions.  # noqa: E501
        :type balance_after_mutation: float
        :param counter_party_account_number: The counter_party_account_number of this TransactionResponseTransactions.  # noqa: E501
        :type counter_party_account_number: str
        :param counter_party_name: The counter_party_name of this TransactionResponseTransactions.  # noqa: E501
        :type counter_party_name: str
        :param amount: The amount of this TransactionResponseTransactions.  # noqa: E501
        :type amount: float
        :param currency: The currency of this TransactionResponseTransactions.  # noqa: E501
        :type currency: str
        :param status: The status of this TransactionResponseTransactions.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'transaction_id': str,
            'mutation_code': str,
            'description_lines': List[str],
            'transaction_timestamp': str,
            'book_date': date,
            'balance_after_mutation': float,
            'counter_party_account_number': str,
            'counter_party_name': str,
            'amount': float,
            'currency': str,
            'status': str
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'mutation_code': 'mutationCode',
            'description_lines': 'descriptionLines',
            'transaction_timestamp': 'transactionTimestamp',
            'book_date': 'bookDate',
            'balance_after_mutation': 'balanceAfterMutation',
            'counter_party_account_number': 'counterPartyAccountNumber',
            'counter_party_name': 'counterPartyName',
            'amount': 'amount',
            'currency': 'currency',
            'status': 'status'
        }

        self._transaction_id = transaction_id
        self._mutation_code = mutation_code
        self._description_lines = description_lines
        self._transaction_timestamp = transaction_timestamp
        self._book_date = book_date
        self._balance_after_mutation = balance_after_mutation
        self._counter_party_account_number = counter_party_account_number
        self._counter_party_name = counter_party_name
        self._amount = amount
        self._currency = currency
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'TransactionResponseTransactions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transactionResponse_transactions of this TransactionResponseTransactions.  # noqa: E501
        :rtype: TransactionResponseTransactions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self) -> str:
        """Gets the transaction_id of this TransactionResponseTransactions.

        Unique id generated for every request  # noqa: E501

        :return: The transaction_id of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id: str):
        """Sets the transaction_id of this TransactionResponseTransactions.

        Unique id generated for every request  # noqa: E501

        :param transaction_id: The transaction_id of this TransactionResponseTransactions.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    @property
    def mutation_code(self) -> str:
        """Gets the mutation_code of this TransactionResponseTransactions.

        Indicator for the type of transaction  # noqa: E501

        :return: The mutation_code of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._mutation_code

    @mutation_code.setter
    def mutation_code(self, mutation_code: str):
        """Sets the mutation_code of this TransactionResponseTransactions.

        Indicator for the type of transaction  # noqa: E501

        :param mutation_code: The mutation_code of this TransactionResponseTransactions.
        :type mutation_code: str
        """

        self._mutation_code = mutation_code

    @property
    def description_lines(self) -> List[str]:
        """Gets the description_lines of this TransactionResponseTransactions.

        Unformatted text entered by the user during the transaction. String array of up to nine lines of each 0 to 32 characters  # noqa: E501

        :return: The description_lines of this TransactionResponseTransactions.
        :rtype: List[str]
        """
        return self._description_lines

    @description_lines.setter
    def description_lines(self, description_lines: List[str]):
        """Sets the description_lines of this TransactionResponseTransactions.

        Unformatted text entered by the user during the transaction. String array of up to nine lines of each 0 to 32 characters  # noqa: E501

        :param description_lines: The description_lines of this TransactionResponseTransactions.
        :type description_lines: List[str]
        """

        self._description_lines = description_lines

    @property
    def transaction_timestamp(self) -> str:
        """Gets the transaction_timestamp of this TransactionResponseTransactions.

        Timestamp of the transaction execution  # noqa: E501

        :return: The transaction_timestamp of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._transaction_timestamp

    @transaction_timestamp.setter
    def transaction_timestamp(self, transaction_timestamp: str):
        """Sets the transaction_timestamp of this TransactionResponseTransactions.

        Timestamp of the transaction execution  # noqa: E501

        :param transaction_timestamp: The transaction_timestamp of this TransactionResponseTransactions.
        :type transaction_timestamp: str
        """

        self._transaction_timestamp = transaction_timestamp

    @property
    def book_date(self) -> date:
        """Gets the book_date of this TransactionResponseTransactions.

        The bookkeeping date of the mutation  # noqa: E501

        :return: The book_date of this TransactionResponseTransactions.
        :rtype: date
        """
        return self._book_date

    @book_date.setter
    def book_date(self, book_date: date):
        """Sets the book_date of this TransactionResponseTransactions.

        The bookkeeping date of the mutation  # noqa: E501

        :param book_date: The book_date of this TransactionResponseTransactions.
        :type book_date: date
        """
        if book_date is None:
            raise ValueError("Invalid value for `book_date`, must not be `None`")  # noqa: E501

        self._book_date = book_date

    @property
    def balance_after_mutation(self) -> float:
        """Gets the balance_after_mutation of this TransactionResponseTransactions.

        Account balance after the current payment transaction  # noqa: E501

        :return: The balance_after_mutation of this TransactionResponseTransactions.
        :rtype: float
        """
        return self._balance_after_mutation

    @balance_after_mutation.setter
    def balance_after_mutation(self, balance_after_mutation: float):
        """Sets the balance_after_mutation of this TransactionResponseTransactions.

        Account balance after the current payment transaction  # noqa: E501

        :param balance_after_mutation: The balance_after_mutation of this TransactionResponseTransactions.
        :type balance_after_mutation: float
        """

        self._balance_after_mutation = balance_after_mutation

    @property
    def counter_party_account_number(self) -> str:
        """Gets the counter_party_account_number of this TransactionResponseTransactions.

        Counter account number. Will be empty if no counter account is found for the transaction (e.g an ATM withdrawal).  # noqa: E501

        :return: The counter_party_account_number of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._counter_party_account_number

    @counter_party_account_number.setter
    def counter_party_account_number(self, counter_party_account_number: str):
        """Sets the counter_party_account_number of this TransactionResponseTransactions.

        Counter account number. Will be empty if no counter account is found for the transaction (e.g an ATM withdrawal).  # noqa: E501

        :param counter_party_account_number: The counter_party_account_number of this TransactionResponseTransactions.
        :type counter_party_account_number: str
        """

        self._counter_party_account_number = counter_party_account_number

    @property
    def counter_party_name(self) -> str:
        """Gets the counter_party_name of this TransactionResponseTransactions.

        Name associated with the counter account number  # noqa: E501

        :return: The counter_party_name of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._counter_party_name

    @counter_party_name.setter
    def counter_party_name(self, counter_party_name: str):
        """Sets the counter_party_name of this TransactionResponseTransactions.

        Name associated with the counter account number  # noqa: E501

        :param counter_party_name: The counter_party_name of this TransactionResponseTransactions.
        :type counter_party_name: str
        """
        if counter_party_name is not None and len(counter_party_name) > 24:
            raise ValueError("Invalid value for `counter_party_name`, length must be less than or equal to `24`")  # noqa: E501

        self._counter_party_name = counter_party_name

    @property
    def amount(self) -> float:
        """Gets the amount of this TransactionResponseTransactions.

        Amount including minus -9999999.99, unformatted. Negative in case of debit transactions  # noqa: E501

        :return: The amount of this TransactionResponseTransactions.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this TransactionResponseTransactions.

        Amount including minus -9999999.99, unformatted. Negative in case of debit transactions  # noqa: E501

        :param amount: The amount of this TransactionResponseTransactions.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self) -> str:
        """Gets the currency of this TransactionResponseTransactions.

        Currency of the mutation, 3 characters alphabetic ISO currency code (e.g. EUR or USD) as per ISO 4217  # noqa: E501

        :return: The currency of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this TransactionResponseTransactions.

        Currency of the mutation, 3 characters alphabetic ISO currency code (e.g. EUR or USD) as per ISO 4217  # noqa: E501

        :param currency: The currency of this TransactionResponseTransactions.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def status(self) -> str:
        """Gets the status of this TransactionResponseTransactions.

        The status of the transaction.  # noqa: E501

        :return: The status of this TransactionResponseTransactions.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TransactionResponseTransactions.

        The status of the transaction.  # noqa: E501

        :param status: The status of this TransactionResponseTransactions.
        :type status: str
        """
        allowed_values = ["EXECUTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
