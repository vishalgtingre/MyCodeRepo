# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MessageErrors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, message: str=None, reference: str=None, trace_id: str=None, status: int=None, category: str=None):  # noqa: E501
        """MessageErrors - a model defined in Swagger

        :param code: The code of this MessageErrors.  # noqa: E501
        :type code: str
        :param message: The message of this MessageErrors.  # noqa: E501
        :type message: str
        :param reference: The reference of this MessageErrors.  # noqa: E501
        :type reference: str
        :param trace_id: The trace_id of this MessageErrors.  # noqa: E501
        :type trace_id: str
        :param status: The status of this MessageErrors.  # noqa: E501
        :type status: int
        :param category: The category of this MessageErrors.  # noqa: E501
        :type category: str
        """
        self.swagger_types = {
            'code': str,
            'message': str,
            'reference': str,
            'trace_id': str,
            'status': int,
            'category': str
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'reference': 'reference',
            'trace_id': 'traceId',
            'status': 'status',
            'category': 'category'
        }

        self._code = code
        self._message = message
        self._reference = reference
        self._trace_id = trace_id
        self._status = status
        self._category = category

    @classmethod
    def from_dict(cls, dikt) -> 'MessageErrors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message_errors of this MessageErrors.  # noqa: E501
        :rtype: MessageErrors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this MessageErrors.

        The unique error code key  # noqa: E501

        :return: The code of this MessageErrors.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this MessageErrors.

        The unique error code key  # noqa: E501

        :param code: The code of this MessageErrors.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self) -> str:
        """Gets the message of this MessageErrors.

        Understandable description for the error code key  # noqa: E501

        :return: The message of this MessageErrors.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this MessageErrors.

        Understandable description for the error code key  # noqa: E501

        :param message: The message of this MessageErrors.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def reference(self) -> str:
        """Gets the reference of this MessageErrors.

        Reference where to find more information on error  # noqa: E501

        :return: The reference of this MessageErrors.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference: str):
        """Sets the reference of this MessageErrors.

        Reference where to find more information on error  # noqa: E501

        :param reference: The reference of this MessageErrors.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def trace_id(self) -> str:
        """Gets the trace_id of this MessageErrors.

        The unique trace id sent for this request  # noqa: E501

        :return: The trace_id of this MessageErrors.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id: str):
        """Sets the trace_id of this MessageErrors.

        The unique trace id sent for this request  # noqa: E501

        :param trace_id: The trace_id of this MessageErrors.
        :type trace_id: str
        """
        if trace_id is None:
            raise ValueError("Invalid value for `trace_id`, must not be `None`")  # noqa: E501

        self._trace_id = trace_id

    @property
    def status(self) -> int:
        """Gets the status of this MessageErrors.

        The http code of the error  # noqa: E501

        :return: The status of this MessageErrors.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this MessageErrors.

        The http code of the error  # noqa: E501

        :param status: The status of this MessageErrors.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def category(self) -> str:
        """Gets the category of this MessageErrors.

        Category of error  # noqa: E501

        :return: The category of this MessageErrors.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this MessageErrors.

        Category of error  # noqa: E501

        :param category: The category of this MessageErrors.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category
